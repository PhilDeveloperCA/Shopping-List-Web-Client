            <div className="Group_List">
                <h2> {group.name}{selectedGroup===group.id?'- SELECTED':''}</h2>
                <button onClick = {() => handleGroupSelection(group.id)}> Select Group </button>
                {state.user ===group.admin? <button onClick = {(event) => {deleteGroup(event,group.id)}}> Delete Group </button>:null}
                <Button variant="contained" color="primary" onClick= {() => history.push(`/group/${group.id}`)}> Visit Group Page </Button>


                    <div>
                        <Typography 
                        variant="h1"
                        color = "primary"
                        align = "center"
                        >
                        Your Groups 
                        </Typography>
                        <h1> Your Groups </h1>
                        <div className="nested">
                            {GroupList}
                        </div>
                    </div>


            <ButtonGroup color="secondary" variant="contained">
                <Button
                //endIcon and startIcon why isn't it working
                endIcon={<GroupIcon />}
                startIcon ={<GroupIcon />}
                >
                
                </Button>
                <Button
                className={classes.btn}>
                    Test Button
                </Button>
                <Button></Button>
            </ButtonGroup>

            <h1> {login?'Login Page':'Sign-Up Page'} </h1>
            <Button color="primary" variant="contained" onClick= {(e) => {e.preventDefault(); setLogin(false)}} disabled={!login}> New User? Sign Up </Button>
            <Button size="large" color="primary" variant="contained" onClick= {(e) => {e.preventDefault(); setLogin(true)}} disabled={login}> Returning ? Sign in </Button>


            <form>
                <label> Username : </label>
                <input onChange ={(e) => {setUsername(e.target.value)}}/>
                <label> Password: </label>
                <input onChange ={(e) => {setPassword(e.target.value)}}/>
                <button onClick = {SubmitAuth}> {login? 'Login': 'Sign-Up'}</button>
            </form>

           <form>
                    <label htmlFor= "group"> New Group : </label>
                    <input className="group name" id="group" onChange={handleGroupnameChange}/>
                    <button onClick={SubmitGroup}> Submit Group: </button>
                </form>

                                <h2> {list.name} {selectedShoppingList === list.id? '-' : ''} </h2>
                <button onClick={(event) => {event.preventDefault(); setShoppingListSelection(list.id)}}>  Select List </button>
                <button onClick = {() => history.push(`/group/${id}/shoppinglist/${list.id}`) }> Visit Shopping List </button>
            </div>

                            <h1> Create Shopping List </h1>
                <form>
                    <label htmlFor = "list"> Add Shopping List : </label>
                    <input className="class" onChange={(event) => {handleShoppinglistNameChange(event.target.value)}}/>
                    <button onClick={addList}> Add List : </button>
                </form>

                        <div>
                <h1> Invite Users </h1>
                <label htmlFor="inviteusername"></label>
                <input id="inviteusername" onChange={(e)=>setInviteUsername(e.target.value)}/>
                <button onClick={(event) => {event.preventDefault(); inviteUser()}}/>
            </div>
    </div>

                    <table>
                    <thead>
                        <tr>
                            <th> Creator </th>
                            <th> Name </th>
                            <th> Quantity </th>
                            <th> Price/Unit </th>
                            <th> Apply Tax </th>
                        </tr>
                    </thead>
                    {ItemDisplay}
                </table>

                    const ItemDisplay = items?.map((item, index) => {
        return (
            <tr> 
                <td> {item.username} </td>
                <td> {item.name} </td>
                <td> Quantity:  <input step="1" size={4} onBlur={(event) => handleChangeQuantity(event,index)}/></td>
                <td> Cost : <input step=".01" size={6} onBlur={(event) => handleChangeCost(event,index)}/> </td>
                <td><input type="checkbox"  onClick= {(e)=> handleTaxQuantity(index)}/></td>
            </tr>
        );
    });

                    <div>
                    <h1> Add Items : </h1>
                    <form> 
                        <label htmlFor = "itemname"> Item Name  : </label>
                        <input className="item" id="itemname" onBlur= {(e)=> setItemName(e.target.value)}/>
                        <label htmlFor = "itemdescription"> Item Description : </label>
                        <input id="itemdescription" className ="itemdescription" onBlur = {(e => setItemDescription(e.target.value))}/>
                        <button onClick = {SubmitItem}> Submit </button>
                    </form>
                </div>
                <h1> Shopping List </h1>

                    <div> 
                    <button onClick={(e)=> {
                        e.preventDefault();
                        history.push(location.pathname+'/compose');
                    }}> Test Compute Price List  </button>            
                    <label> Tax Rate : </label>
                    <input onChange={e => setTax(parseFloat(e.target.value))}/>
                </div>
                <div>
                    <div>
                        <form></form>
                    </div>
                    <button onClick={generateCostsTable}> Calculate Costs </button>
                    {costTable?costsTableJSX:null}
                </div>
            </div>
            <div>

                            <div className="grid-container">
                    <div>
                        <h1> Invites : </h1>
                        <div> 
                            {InviteList} 
                        </div>
                    </div>
            </div>


                /*useEffect(() => {
        const FetchGroups = async () => {
            axios.get(`${api_url}/group/group/mygroups`, {
                headers: {
                    Authorization : state.token
                },
            })
            .then(response => setGroups(response.data))
            .catch(err => console.log(err));
        }
        if(state.token) FetchGroups();
        else return;
    }, [state.token]);*/

    useEffect(() => {
        const FetchInvites = async () => {
            axios.get(`${api_url}/group/invite/getmyinvites`, {
                headers: {
                    Authorization : state.token
                },
            })
            .then(response => setInvites(response.data))
            .catch(err => console.log(err));
        }
        if(state.token) FetchInvites();
        else return;
    }, [state.token]);

            /*axios.get(`${api_url}/group/create`, {
            params: {
                name : groupname
            },
            headers : {
                Authorization : state.token
            }
        }, 
        )*/


    /*const createItem = async (name:string, description:string) => {
        if(category1 && category1 === category2) return setCategoryError('Enter Different or Only 1 Category');
        console.log(category1);
        if(itemName === null || itemName ==='' || itemName === undefined) return setNameError('Enter a Valid Name ')
        if(itemDescription === null || itemDescription || '' || itemDescription === undefined) return setItemDescription('Enter a Valid Description')
        try{
            const response:any = await axios.get(`${me}/items/add/${listid}`, {
                headers: {
                    Authorization : state.token,
                },
                params : {
                    name,
                    description,
                    category1,
                    category2,
                }
            });
            const item:Item= response.data[0];
            setItems([...items,item])
            console.log(items);
        }
        catch(err){
            console.log(err);
        }
        //do something with Redux or local state here???
    }*/

            /*axios.get(`${me}/items/delete/${id}`, {
            headers: {
                Authorization: state.token,
            },
            params : {
                id
            }
        })*/

            const InviteList:any = invites?.map((invite:any, index:number) => {
        return(
            <div>
                <Container key ={invite.id}>
                    <Typography variant = "h6" align="center" color="primary"> {invite.name}</Typography>
                    <Button onClick={(event) => acceptInvite(event, invite.group_id)} variant = "contained" color = "primary"> Accept Invite </Button>
                    <Button onClick={(event) => acceptInvite(event, invite.group_id)} variant = "contained" color = "secondary"> Decline Invitation : </Button>
                </Container>
            </div>
        );
    })

    {/*<Grid item>
        <form noValidate autoComplete="off"> 
            <TextField 
                label = "Enter Username"
                variant = "outlined"
                color = "primary"
                required
                error = {usernameError != null? true:false}
                helperText={usernameError}
                onChange ={(e) => {setUsername(e.target.value)}}
            />
            <TextField 
                label = "Enter Password"
                variant = "outlined"
                color = "primary"
                required
                error = {passwordError != null? true:false}
                helperText={passwordError}
                onChange ={(e) => {setPassword(e.target.value)}}
            />
        
        {!login?<TextField 
            label = "Re-Enter Password"
            variant = "outlined"
            color = "primary"
            required
            error = {passwordError != null? true:false}
            helperText={passwordError}
            onChange = {(e) => {setConfirmPassword(e.target.value)}}
        />:null}
        </form>
        </Grid>
        <Container>
                <GroupIcon fontSize = "large" color="secondary" />
            </Container>
        */}

        return(
            <Grid item sm={9} md={6} lg={4} className = {classes.Group_List}>
                    <Box className={classes.Group_List} m={2} pt={3}>
                        <Typography 
                            color = "secondary"
                            variant = "h4"
                            align = "center"
                        >
                            {group.name}{selectedGroup===group.id?'-':''}
                        </Typography>
                        <ButtonGroup
                            color = "primary"
                            variant = "contained"
                        >
                            <Button 
                                startIcon = {<DetailsIcon/>}
                                onClick = {() => handleGroupSelection(group.id,index)}
                            >
                                See Group Details 
                            </Button>
                            <Button
                                endIcon = {<DeleteIcon />}
                                onClick = {(e) => {deleteGroup(e, group.id, index)}}
                            >
                                Delete Group 
                            </Button>
                            <Button
                                endIcon = {<GroupIcon />}
                                onClick= {() => history.push(`/group/${group.id}`)}
                            >
                                Visit Group Page
                            </Button>  
                        </ButtonGroup>
                    </Box>
                    <div className={selectedGroup === group.id?'members-active':'members'}> {
                            //name.map((member,index) => <li className="members"> {member}</li>)
                        }
                    </div>
            <div>
                    
                </div> 
            </Grid>
            );

            if(!state.user || !state.token) return (
                <Container className ={classes.form}>
                    <Typography
                        variant = "h3"
                    >
                        Login / Sign-Up Page 
                    </Typography>
                    <GroupIcon fontSize = "large" color="secondary" />
                    <Button 
                        color="primary" 
                        variant="contained" 
                        size = "large"
                        onClick= {(e) => {e.preventDefault(); setLogin(false)}} 
                        disabled={!login}> 
                        New User? Sign Up 
                    </Button>
                    <Button 
                        size="large" 
                        color="primary" 
                        variant="contained" 
                        onClick= {(e) => {e.preventDefault(); setLogin(true)}} 
                        disabled={login}> 
                        Returning ? Sign in 
                    </Button>
                    <form noValidate autoComplete="off"> 
                        <TextField 
                            className = {classes.field}
                            label = "Enter Username"
                            variant = "outlined"
                            color = "primary"
                            required
                            error = {usernameError != null? true:false}
                            helperText={usernameError}
                            onChange ={(e) => {setUsername(e.target.value)}}
                        />
                        <TextField 
                            className = {classes.field}
                            label = "Enter Password"
                            variant = "outlined"
                            color = "primary"
                            required
                            error = {passwordError != null? true:false}
                            helperText={passwordError}
                            onChange ={(e) => {setPassword(e.target.value)}}
                        />
                    
                    {!login?<TextField 
                        className = {classes.field}
                        label = "Re-Enter Password"
                        variant = "outlined"
                        color = "primary"
                        required
                        error = {passwordError != null? true:false}
                        helperText={passwordError}
                        onChange = {(e) => {setConfirmPassword(e.target.value)}}
                    />:null}
    
                    <Button 
                        size="large" 
                        color="primary" 
                        variant="contained" 
                        onClick = {SubmitAuth}
                    > 
                        {login? 'Login': 'Sign-Up'}
                    </Button>
                    </form>
                </Container>
        );

        const Login = async (event:any) => {
            event.preventDefault();
            if(username === '') return setUsernameError('Enter a Valid Username');
            if(password === '') return setPasswordError('Enter a Valid Password')
    
            axios.post(`/auth/signin`,
                {
                    username,
                    password
                }            
            )
            .then(response => 
                dispatch({
                    type: 'login',
                    payload: {
                        user: response.data.username,
                        token:response.data.jwt,
                    }
                })
            )
            .catch(err => {
                console.log(err);
                setPasswordError('Invalid Username or Password')
                setUsernameError('Invalid Username or Password')
            });
        }
    
        const Signup = async (event:any) => {
            event.preventDefault();
            if(username === '' || username === null) return setUsernameError('Enter a Valid Username');
            if(password === ''|| password === null) return setPasswordError('Enter a Valid Password')
            if(confirmPassword != password) return setPasswordError('Passwords Do Not Match');
            console.log({username,password})
            axios.post(`/auth/signup`,
                {
                    username,
                    password
                },
                {
                    validateStatus: function(status){
                        return status >= 200 && status < 300;
                    }
                }          
            )
            .then(response => 
                dispatch({
                    type: 'login',
                    payload: {
                        user: response.data.user[0].username,
                        token:response.data.jwt,
                    }
                })
            )
            .catch(err =>  {
                console.log(err);
                setUsernameError('Username Already in Use');
            });
        }
    
        const SubmitAuth = (event:any) => {
            if(login){
                Login(event);
            }
            else Signup(event);
        }